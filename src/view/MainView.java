/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.sun.webkit.graphics.WCGraphicsManager;

import entities.Item;
import entities.Stockoperation;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.CellEditor;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.util.Rotation;

import utilities.Utils;

/**
 *
 * @author sp1d3r
 */
public class MainView extends javax.swing.JFrame {

    private static MainView _instance;
    private static final int COLUMN_NUMBER_LOAD = 2;
    private static final int COLUMN_NUMBER_DOWNLOAD = 3;
    private static final int COLUMN_DATE = 4;
    private static final int KEY_ENTER = 10;

    private MeasureView mv = null;
    private CategoryView cv = null;
    private ItemView iv = null;

    private Utils utls = Utils.getInstance();
    private EntityManagerFactory emf = Persistence
            .createEntityManagerFactory("jdbc:derby:stockDB;create=truePU");
    EntityManager em = emf.createEntityManager();

    /**
     * Creates new form MainView
     */
    public MainView() {
        initComponents();
        _instance = this;
        loadSettings();
        setTableLayout();

    }

    public static MainView getInstance() {
        if (_instance == null) {
            _instance = new MainView();
        }
        return _instance;
    }

    private void loadSettings() {

        try {

            utls.loadSettings();
        } catch (IOException ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        }

        /* Quit Confirmation */
        jCheckBoxMenuItem2.setState(Boolean.parseBoolean(utls.SettingsFile.get(utls.QUIT_SETTING)));
        /* graph settings */
        jCheckBoxMenuItem1.setState(Boolean.parseBoolean(utls.SettingsFile.get(utls.CHART_SETTING)));
        setChartLayout();

        /* restate opened windows */
        if (utls.SettingsFile.get(utls.ITEM_WINDOW_OPENED_SETTING) != null && Boolean.parseBoolean(utls.SettingsFile.get(utls.ITEM_WINDOW_OPENED_SETTING))) {
            jButton1ActionPerformed(null);
        }
        if (utls.SettingsFile.get(utls.MEASURE_WINDOW_OPENED_SETTING) != null && Boolean.parseBoolean(utls.SettingsFile.get(utls.MEASURE_WINDOW_OPENED_SETTING))) {
            jButton2ActionPerformed(null);
        }
        if (utls.SettingsFile.get(utls.CATEGORY_WINDOW_OPENED_SETTING) != null && Boolean.parseBoolean(utls.SettingsFile.get(utls.CATEGORY_WINDOW_OPENED_SETTING))) {
            jButton3ActionPerformed(null);
        }

    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("jdbc:derby:stockDB;create=truePU").createEntityManager();
        stockoperationQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT s FROM Stockoperation s");
        stockoperationList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : stockoperationQuery.getResultList();
        itemQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT i FROM Item i");
        itemList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : itemQuery.getResultList();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        itemCB = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        notesTF = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        categoryLabel = new javax.swing.JLabel();
        umLabel = new javax.swing.JLabel();
        umLabel1 = new javax.swing.JLabel();
        umLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        umLabel3 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        loadTF = new javax.swing.JFormattedTextField();
        downloadTF = new javax.swing.JFormattedTextField();
        initialqTF = new javax.swing.JFormattedTextField();
        remainqTF = new javax.swing.JFormattedTextField();
        graphPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        downloadSlider = new javax.swing.JSlider();
        downloadSliderMinLabel = new javax.swing.JLabel();
        downloadSliderMaxLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        loadSlider = new javax.swing.JSlider();
        loadSliderMinLabel = new javax.swing.JLabel();
        loadSliderMaxLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Lista movimenti articoli");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, stockoperationList, jTable1);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("Id");
        columnBinding.setColumnClass(Long.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${item}"));
        columnBinding.setColumnName("Articolo");
        columnBinding.setColumnClass(entities.Item.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${timestamp}"));
        columnBinding.setColumnName("Data");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${loaded_quantity}"));
        columnBinding.setColumnName("Carico");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${downloaded_quantity}"));
        columnBinding.setColumnName("Scarico");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${notes}"));
        columnBinding.setColumnName("Note");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jTable1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable1PropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel2.setBackground(java.awt.SystemColor.inactiveCaption);
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton1.setText("Gestione Articoli");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Gestione U.M.");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Gestione Categorie");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addGap(13, 13, 13))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2, jButton3});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(java.awt.SystemColor.inactiveCaption);
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, itemList, itemCB);
        bindingGroup.addBinding(jComboBoxBinding);

        itemCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                itemCBItemStateChanged(evt);
            }
        });
        itemCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCBActionPerformed(evt);
            }
        });

        jLabel1.setText("Movimenti per Articolo");

        jLabel2.setText("Quant. da caricare");

        jLabel3.setText("Quant. da scaricare");

        jLabel4.setText("Quant. iniziale");

        jLabel5.setText("Note");

        categoryLabel.setText("...");

        umLabel.setText("...");

        umLabel1.setText("...");

        umLabel2.setText("...");

        jLabel6.setText("Quant. residua");

        umLabel3.setText("...");

        jButton4.setText("Aggiungi");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Elimina");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        loadTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        loadTF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, loadSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), loadTF, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        loadTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                loadTFFocusLost(evt);
            }
        });
        loadTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadTFMouseClicked(evt);
            }
        });
        loadTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                loadTFKeyPressed(evt);
            }
        });

        downloadTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        downloadTF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, downloadSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), downloadTF, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        downloadTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                downloadTFFocusLost(evt);
            }
        });
        downloadTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                downloadTFMouseClicked(evt);
            }
        });
        downloadTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                downloadTFKeyPressed(evt);
            }
        });

        initialqTF.setEditable(false);
        initialqTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        initialqTF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        initialqTF.setText("0,00");

        remainqTF.setEditable(false);
        remainqTF.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        remainqTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        remainqTF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        remainqTF.setText("0,00");
        remainqTF.setToolTipText("");
        remainqTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remainqTFActionPerformed(evt);
            }
        });
        remainqTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                remainqTFPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 335, Short.MAX_VALUE)
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 182, Short.MAX_VALUE)
        );

        jPanel3.setBackground(java.awt.SystemColor.inactiveCaption);

        downloadSlider.setValue(0);

        downloadSliderMinLabel.setText("0");

        downloadSliderMaxLabel.setText("100");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(downloadSliderMinLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downloadSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downloadSliderMaxLabel)
                .addGap(32, 32, 32))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(downloadSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(downloadSliderMinLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(downloadSliderMaxLabel, javax.swing.GroupLayout.Alignment.TRAILING)))
        );

        jPanel4.setBackground(java.awt.SystemColor.inactiveCaption);

        loadSlider.setValue(0);

        loadSliderMinLabel.setText("0");

        loadSliderMaxLabel.setText("100");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loadSliderMinLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadSliderMaxLabel)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(loadSliderMinLabel)
                    .addComponent(loadSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 1, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(loadSliderMaxLabel))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(loadTF, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(umLabel))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(downloadTF, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(umLabel1)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(itemCB, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(initialqTF, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(umLabel2)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(categoryLabel))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(notesTF, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(remainqTF, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(umLabel3)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 318, Short.MAX_VALUE)
                .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton4, jButton5});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(itemCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel1)
                                            .addComponent(categoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(loadTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(umLabel)
                                            .addComponent(jLabel2)))
                                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(umLabel1)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(downloadTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(initialqTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(umLabel2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(remainqTF, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(umLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(notesTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(53, 53, 53)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5))))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {initialqTF, remainqTF});

        jMenu1.setText("File");

        jMenuItem1.setText("Esci");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Impostazioni");

        jCheckBoxMenuItem1.setText("Grafici");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jCheckBoxMenuItem1);

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("Conferma la chiusura");
        jCheckBoxMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jCheckBoxMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        iv = ItemView.getInstance();
        iv.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        mv = MeasureView.getInstance();
        mv.setSize(new Dimension(351, 320));
        mv.setLocation(this.getSize().width - mv.getSize().width / 2, this.getLocation().y);
        mv.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        cv = CategoryView.getInstance();
        cv.setSize(new Dimension(351, 320));
        cv.setLocation(this.getSize().width - cv.getSize().width / 2, this.getLocation().y + 340);
        cv.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        insertNewTrack((Item) itemCB.getSelectedItem(), false);
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void changeRemainTFColor(double remain) {

        Item item = (Item) itemCB.getSelectedItem();
        double rq = remain;
        if (item.getMin_quantity() > rq) {
            remainqTF.setBackground(Color.red);
            remainqTF.setToolTipText("Attenzione, valore al di sotto della quantità minima!");
        } else {
            remainqTF.setBackground(initialqTF.getBackground());
            remainqTF.setToolTipText(null);
            notesTF.setText("");
        }

    }

    public void setDateInCell(Date dt) {
        int selectedRow = -1;
        int selectedColumn = -1;

        selectedRow = jTable1.getSelectedRow();
        selectedColumn = jTable1.getSelectedColumn();

        if (selectedColumn > -1 && selectedRow > -1) {
            jTable1.setValueAt(dt, selectedRow, selectedColumn);
        }
        CellEditor cellEditor = jTable1.getCellEditor();
        if (cellEditor != null) {
            if (cellEditor.getCellEditorValue() != null) {
                cellEditor.stopCellEditing();
            } else {
                cellEditor.cancelCellEditing();
            }
        }

    }

    public void insertNewTrack(Item item, boolean autoInsert) {
        if (item == null) {
            return;
        }
        if (!checkInputFields()) {
            return;
        }
        Stockoperation s = new Stockoperation();
        s.setItem(item);
        s.setTimestamp(Calendar.getInstance().getTime());
        //if it is inserting from this jFrame
        if (!autoInsert) {
            s.setDownloaded_quantity(Double.valueOf(downloadTF.getText().replace(",", ".")));
            s.setLoaded_quantity(Double.valueOf(loadTF.getText().replace(",", ".")));
            s.setNotes(notesTF.getText());
        } //it it is inserting a first row from Item jFrame
        else {
            s.setDownloaded_quantity(0.0);
            s.setLoaded_quantity(0.0);
            s.setNotes("Primo inserimento da articoli");
        }

        em.getTransaction().begin();
        em.persist(s);
        em.getTransaction().commit();
        refreshJTable();

        //reset fields
        loadTF.setText("0,00");
        downloadTF.setText("0,00");
        loadSlider.setValue(0);
        downloadSlider.setValue(0);
                

    }

    private boolean checkInputFields() {
        boolean result = true;
        result = utls.changeFieldBackground(loadTF, result);
        result = utls.changeFieldBackground(downloadTF, result);

        if (!result) {
            utls.showErrorDialog(this, "Inserire una descrizione per aggiungere il dato", "Errore inserimento");
        }
        return result;
    }

    public void refreshItemCombo(Item item, boolean fromItems) {

        itemList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : itemQuery.getResultList();
        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, itemList, itemCB);
        bindingGroup.addBinding(jComboBoxBinding);
        bindingGroup.bind();

        insertNewTrack(item, fromItems);

    }

    private void setChartLayout() {
        graphPanel.setBackground(jPanel1.getBackground());
        graphPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
        graphPanel.setPreferredSize(new Dimension(300, 200));
        graphPanel.removeAll();

        if (!jCheckBoxMenuItem1.getState()) {
            graphPanel.updateUI();
            return;
        }

        System.out.println("view.MainView.setChartLayout()");

        HashMap<Date, Double> dset = new HashMap<Date, Double>();
        Date d = new Date();

        try {
            for (Stockoperation so : stockoperationList) {

                d = so.getTimestamp();
                if (dset.containsKey(d)) {
                    dset.put(d, dset.get(d) + so.getDownloaded_quantity());
                } else {
                    dset.put(d, so.getDownloaded_quantity());
                }
            }

            utls.createTSChart(graphPanel, "Trend Uscite", dset);
        } catch (Exception e) {
            System.out.println("Error during chart building");
            e.printStackTrace();
        }

    }

    private void setTableLayout() {

        jTable1.getColumnModel().getColumn(0).setMinWidth(0);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
        jTable1.getColumnModel().getColumn(0).setWidth(0);

        //hide also item column        
        jTable1.getColumnModel().getColumn(1).setMinWidth(0);
        jTable1.getColumnModel().getColumn(1).setMaxWidth(0);
        jTable1.getColumnModel().getColumn(1).setWidth(0);

        jTable1.getColumnModel().getColumn(2).setMaxWidth(100);
        jTable1.getColumnModel().getColumn(3).setMaxWidth(100);
        jTable1.getColumnModel().getColumn(4).setMinWidth(100);
        jTable1.getColumnModel().getColumn(4).setMaxWidth(200);

        // auto storting
        jTable1.setAutoCreateRowSorter(true);

        //set terminateEditOnFocusLost on
        jTable1.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
    }


    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        utls.SettingsFile.put(utls.ITEM_WINDOW_OPENED_SETTING, String.valueOf(iv != null && iv.isVisible()));
        utls.SettingsFile.put(utls.CATEGORY_WINDOW_OPENED_SETTING, String.valueOf(cv != null && cv.isVisible()));
        utls.SettingsFile.put(utls.MEASURE_WINDOW_OPENED_SETTING, String.valueOf(mv != null && mv.isVisible()));

        try {
            utls.saveSettings();
        } catch (IOException ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (jCheckBoxMenuItem2.getState() && utls.showYesNoDialog(this, "Vuoi uscire dal programma", "Confermare chiusura") == 0) {
            System.exit(0);
        }
        if (!jCheckBoxMenuItem2.getState()) {
            System.exit(0);
        }


    }//GEN-LAST:event_formWindowClosing


    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int lastRowIndex = jTable1.getSelectedRow();
        Stockoperation s = null;
        long index = jTable1.getSelectedRow();
        if (index > -1) {
            //get item id
            long id = (long) jTable1.getValueAt(jTable1.getSelectedRow(), 0);

            s = em.find(Stockoperation.class, id);

            if (s != null) {

                em.getTransaction().begin();
                em.remove(s);
                em.getTransaction().commit();
                refreshJTable();
                //auto select after delete
                if (lastRowIndex == jTable1.getRowCount()) {
                    lastRowIndex--;
                }
                if (jTable1.getRowCount() > 0) {
                    jTable1.setRowSelectionInterval(lastRowIndex, lastRowIndex);
                }
            }
        }


    }//GEN-LAST:event_jButton5ActionPerformed

    private void itemCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_itemCBItemStateChanged

    }//GEN-LAST:event_itemCBItemStateChanged

    private void jTable1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTable1PropertyChange
        //check if the cell is in editing mode
        if (!evt.getPropertyName().equals("tableCellEditor")) {
            return;
        }

        int index = jTable1.getSelectedRow();

        //show CustomDataPicker if there is a data editing 
        if (index > -1 && evt.getOldValue() == null && jTable1.getSelectedColumn() == COLUMN_DATE) {

            CustomDatePicker cdp = CustomDatePicker.getInstance();
            cdp.setLocation((int) jTable1.getLocationOnScreen().getX(), (int) jTable1.getLocationOnScreen().getY());
            Date dt = (Date) jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getSelectedColumn());

            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            String dateStr[] = df.format(dt).toString().split("/");
            cdp.setOldDate(dateStr[0], dateStr[1], dateStr[2]);
            cdp.setVisible(true);

        }
        if (index > -1 && evt.getOldValue() != null) {
            System.out.println("Modified Row!");
            //get table id
            long id = (long) jTable1.getValueAt(index, 0);
            Stockoperation stockOp;
            stockOp = em.find(Stockoperation.class, id);

            em.getTransaction().begin();
            stockOp.setLoaded_quantity((double) jTable1.getValueAt(index, 2));
            stockOp.setDownloaded_quantity((double) jTable1.getValueAt(index, 3));
            stockOp.setTimestamp((java.util.Date) jTable1.getValueAt(index, 4));
            stockOp.setNotes((String) jTable1.getValueAt(index, 5));

            em.getTransaction().commit();
            calculateRemainQuantity((Item) itemCB.getSelectedItem());
        }

    }//GEN-LAST:event_jTable1PropertyChange

    private void remainqTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_remainqTFPropertyChange


    }//GEN-LAST:event_remainqTFPropertyChange

    private void remainqTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remainqTFActionPerformed

    }//GEN-LAST:event_remainqTFActionPerformed

    private void itemCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCBActionPerformed

        //to avoid to reload the table with the call setTableFilter...
        if (evt.toString().endsWith("selectedItemReminder=]")) {
            return;
        }

        Item i = (Item) itemCB.getSelectedItem();
        if (i != null) {
            umLabel.setText(i.getMeasure().getDescription());
            umLabel1.setText(i.getMeasure().getDescription());
            umLabel2.setText(i.getMeasure().getDescription());
            umLabel3.setText(i.getMeasure().getDescription());
            categoryLabel.setText(i.getCategory().getDescription());
            initialqTF.setText(String.valueOf(i.getInit_quantity()).replace(".", ","));
            setTableFilter(i);
            refreshJTable();
        } else {
            umLabel.setText("...");
            umLabel1.setText("...");
            umLabel2.setText("...");
            umLabel3.setText("...");
            initialqTF.setText("0,00");
            categoryLabel.setText("...");
        }

        loadTF.setText("0,0");
        downloadTF.setText("0,0");


    }//GEN-LAST:event_itemCBActionPerformed

    private void loadTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadTFMouseClicked
        loadTF.selectAll();
    }//GEN-LAST:event_loadTFMouseClicked

    private void downloadTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downloadTFMouseClicked
        downloadTF.selectAll();
    }//GEN-LAST:event_downloadTFMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        formWindowClosing(null);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        utls.SettingsFile.put(utls.CHART_SETTING, String.valueOf(jCheckBoxMenuItem1.getState()));
        setChartLayout();

    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    private void jCheckBoxMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem2ActionPerformed
        utls.SettingsFile.put(utls.QUIT_SETTING, String.valueOf(jCheckBoxMenuItem2.getState()));
    }//GEN-LAST:event_jCheckBoxMenuItem2ActionPerformed

    private void downloadTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_downloadTFKeyPressed
        if (evt.getKeyCode() == KEY_ENTER) {
            jButton4ActionPerformed(null);
            downloadTF.selectAll();
        }
    }//GEN-LAST:event_downloadTFKeyPressed

    private void loadTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_loadTFKeyPressed
        if (evt.getKeyCode() == KEY_ENTER) {
            jButton4ActionPerformed(null);
            loadTF.selectAll();
        }
    }//GEN-LAST:event_loadTFKeyPressed

    private void downloadTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_downloadTFFocusLost
        //check whether the inserted value is greater than max source of slider1
        int max= Integer.valueOf(downloadTF.getText());
        if ( max> downloadSlider.getMaximum()){
            downloadSlider.setMaximum(max);
            downloadSliderMaxLabel.setText(String.valueOf(max));
        }
    }//GEN-LAST:event_downloadTFFocusLost

    private void loadTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_loadTFFocusLost
                //check whether the inserted value is greater than max source of slider1
        int max= Integer.valueOf(loadTF.getText());
        if ( max> loadSlider.getMaximum()){
            loadSlider.setMaximum(max);
            loadSliderMaxLabel.setText(String.valueOf(max));
        }
    }//GEN-LAST:event_loadTFFocusLost
    private double calculateRemainQuantity(Item item) {

        entityManager.refresh(item);
        initialqTF.setText(String.valueOf(item.getInit_quantity()).replace(".", ","));

        int count = jTable1.getRowCount();
        double total = 0.0;
        double load = 0.0;
        double download = 0.0;
        for (int i = 0; i < count; i++) {
            load += (double) jTable1.getValueAt(i, COLUMN_NUMBER_LOAD);
            download += (double) jTable1.getValueAt(i, COLUMN_NUMBER_DOWNLOAD);

        }

        total = item.getInit_quantity() + load - download;
        remainqTF.setText(String.valueOf(total).replace(".", ","));
        changeRemainTFColor(total);
        return total;
    }

    private void setTableFilter(Item i) {
        stockoperationQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT s FROM Stockoperation s WHERE s.item=:item").setParameter("item", i);
    }

    public void refreshJTable() {
        System.out.println("view.MainView.refreshJTable()");
        stockoperationList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : stockoperationQuery.getResultList();
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, stockoperationList, jTable1);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("Id");
        columnBinding.setColumnClass(Long.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${item}"));
        columnBinding.setColumnName("Articolo");
        columnBinding.setColumnClass(entities.Item.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${loaded_quantity}"));
        columnBinding.setColumnName("Carico");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${downloaded_quantity}"));
        columnBinding.setColumnName("Scarico");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${timestamp}"));
        columnBinding.setColumnName("Data");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${notes}"));
        columnBinding.setColumnName("Note");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        setTableLayout();
        setChartLayout();
        calculateRemainQuantity((Item) itemCB.getSelectedItem());

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainView().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JSlider downloadSlider;
    private javax.swing.JLabel downloadSliderMaxLabel;
    private javax.swing.JLabel downloadSliderMinLabel;
    private javax.swing.JFormattedTextField downloadTF;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JPanel graphPanel;
    private javax.swing.JFormattedTextField initialqTF;
    private javax.swing.JComboBox<String> itemCB;
    private java.util.List<entities.Item> itemList;
    private javax.persistence.Query itemQuery;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JSlider loadSlider;
    private javax.swing.JLabel loadSliderMaxLabel;
    private javax.swing.JLabel loadSliderMinLabel;
    private javax.swing.JFormattedTextField loadTF;
    private javax.swing.JTextField notesTF;
    private javax.swing.JFormattedTextField remainqTF;
    private java.util.List<entities.Stockoperation> stockoperationList;
    private javax.persistence.Query stockoperationQuery;
    private javax.swing.JLabel umLabel;
    private javax.swing.JLabel umLabel1;
    private javax.swing.JLabel umLabel2;
    private javax.swing.JLabel umLabel3;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
